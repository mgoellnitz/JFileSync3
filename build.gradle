/*
 * Copyright (C) 2013-2025 Martin Goellnitz
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, 02110-1301, USA
 */
plugins {
  id "edu.sc.seis.launch4j" version "2.5.4"
  id "net.ossindex.audit" version "0.4.11"
  id "com.netflix.nebula.ospackage" version "11.11.2"
}
def l4j = true

apply plugin: 'java'
apply plugin: 'application'

defaultTasks 'clean', 'build'

sourceCompatibility = 11
targetCompatibility = 11
compileJava.options.encoding = 'UTF-8'
compileJava.options.deprecation = true

sourceSets {
  main {
    java {
      srcDir 'src'
      exclude 'jfs/sync/fileencrypted/*.java'
      exclude '**/HeapSort.java'
    }
    resources {
      srcDir 'src'
      exclude '**/*.7z'; // I tend to hide some experimental codes here
      exclude '**/*.java'; // result of the exclusions above: this is necessary
    }
  }
  test {
    java {
      srcDir 'test'
    }
    resources {
      srcDir 'test'
      exclude '**/*.zip'; // test folders zip file
    }
  }
}

dependencies {
  // dropbox client
  // implementation files(fileTree(dir: 'lib', includes: ['*.jar']))

  implementation 'org.slf4j:slf4j-api:2.0.17'
  implementation ('com.github.lookfirst:sardine:5.13') {
    exclude group: 'commons-logging', module: 'commons-logging'
  }
  // Use later versions than required by sardine to address vulnerabilities
  implementation 'org.apache.httpcomponents:httpclient:4.5.14'
  implementation 'commons-codec:commons-codec:1.18.0'

  implementation 'org.slf4j:jcl-over-slf4j:2.0.17' // httpclient and vfs use JCL
  implementation 'org.slf4j:jul-to-slf4j:2.0.17' // Sardine uses JUL

  // Cifs code looks good but I don't have shares to use so I skip this
  // implementation 'jcifs:jcifs:1.3.17'
  implementation ('org.apache.commons:commons-vfs2:2.10.0') {
    exclude group: 'commons-logging', module: 'commons-logging'
  }
  // Update transitive dependency from vfs due to vulnerability
  implementation 'org.apache.hadoop:hadoop-hdfs-client:3.4.1'
  // Update transitive dependency from vfs through hadoop-hdfs-client due to vulnerability
  implementation 'com.fasterxml.jackson.core:jackson-annotations:2.19.1'

  implementation 'org.apache.commons:commons-compress:1.27.1'

  implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
  implementation 'javax.servlet:javax.servlet-api:4.0.1'

  // Logging:
  runtimeOnly 'ch.qos.logback:logback-classic:1.5.18'

  testImplementation 'org.testng:testng:7.11.0'
}

test {
  useTestNG() {
  }
}

audit {
  ignore = [ 'org.bouncycastle:bcprov-jdk15on:1.70' ]
  user   = "$ossindexUser"
  token  = "$ossindexToken"
}

repositories {
  mavenCentral()
}

mainClassName = 'jfs.JFileSync'

distTar.enabled = false

if (l4j) {
  launch4j {
    mainClassName = project.mainClassName
    version = '3.0-SNAPSHOT'
    textVersion = 'Executables Release'
    fileDescription = 'Java based encrypting File Syncing Tool'
    errTitle = project.name
    // jreMinVersion = '11'
    // splashFileName= 'win/JFileSync3-640x350-splash.bmp'
    copyright = '(C) 2002-2024, J. Heidrich, M. Goellnitz'
    downloadUrl = 'https://adoptium.net/de/temurin/releases'
    supportUrl = 'https://github.com/mgoellnitz/JFileSync3'
    icon = "$project.projectDir/win/JFileSync3.ico"
    dontWrapJar = true
    initialHeapSize = 1280
    maxHeapSize = 1536
  }

  task createApplication(type: edu.sc.seis.launch4j.tasks.Launch4jExternalTask) {
    outfile = 'JFileSync3.exe'
    xmlFileName = 'JFileSync3.xml'
  }

  startScripts.dependsOn createApplication
}

startScripts {
  doLast {
    // Add some more reasonable memory settings to JFileSync3
    unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-splash:$APP_HOME/share/icons/hicolor/scalable/actions/JFileSync3-640x350-splash.png -ms1280m -mx1536m -Xms1280m -Xmx1536m"')
    windowsScript.text = windowsScript.text.replace('DEFAULT_JVM_OPTS=', 'DEFAULT_JVM_OPTS=-ms1280m -mx1536m -Xms1280m -Xmx1536m')
    // Armor start script to use javaw and start when not used as a command line tool
    windowsScript.text = windowsScript.text.replace('java.exe', '%JAVA_CMD%')
    windowsScript.text = windowsScript.text.replace('@rem Find %JAVA_CMD%', 'set JAVA_PREFIX=start "JFileSync3 starting..."\nset JAVA_CMD=javaw.exe\nif "x%~1" == "x" goto noparams\nset JAVA_PREFIX=\nset JAVA_CMD=java.exe\n:noparams\n\n@rem Find java.exe')
    windowsScript.text = windowsScript.text.replace('"%JAVA_EXE%" %DEFAULT_JVM_OPTS%', '%JAVA_PREFIX% "%JAVA_EXE%" %DEFAULT_JVM_OPTS%')
  }
}

ospackage {
  packageName = 'jfilesync'
  version = '3.0-SNAPSHOT'
  maintainer = 'Martin Goellnitz'
  url = 'https://mgoellnitz.github.io/JFileSync3'
  into("/usr/share") {
    from 'xdg'
    include '**/*.desktop'
    include '**/*.png'
    include '**/*.xml'
  }
  into("/usr/share/$project.name") {
    from '.'
    include 'legal/*.*'
    include 'profiles/*.*'
    include 'README.md'
  }
  into("/usr/lib/$packageName/lib") {
    from "build/install/$project.name/lib"
    include '*.jar'
  }
  into("/usr/lib/$packageName/script") {
    from "build/install/$project.name/bin"
    include "$project.name"
  }
}

installDist.dependsOn startScripts

buildDeb.dependsOn installDist

buildDeb {
  link("/usr/bin/$project.name", "/usr/lib/$packageName/script/$project.name")
}

buildRpm.dependsOn buildDeb

buildRpm {
  link("/usr/bin/$project.name", "/usr/lib/$packageName/script/$project.name")
}

distZip.dependsOn buildRpm

distZip {
  // TODO: later...
  // into(project.name+"/bin") {
  //	from 'bin'
  //	include 'E*.bat'
  //}
  into("$project.name") {
    from "$buildDir/launch4j"
    include '*.exe'
  }
  // Sometimes I want to have the icon file at hand
  into("$project.name/bin") {
    from 'win'
    include '*.ico'
  }
  // Spash screen for windows
  into("$project.name/bin") {
    from 'win'
    include '*.bmp'
  }
  // For the FreeDesktop.org desktop integration this looks better
  into("$project.name/share") {
    from 'xdg'
    include '**/*.desktop'
    include '**/*.png'
    include '**/*.xml'
    include 'prepare*.sh'
  }
  // legal stuff, examples, and documentation
  into(project.name) {
    from '.'
    include 'legal/*.*'
    include 'profiles/*.*'
    include 'README.md'
  }
  /*
  // You might package your personal profiles in here
  into(project.name) {
  from '..'
  include 'profiles/**'
  }
   */
}

private List<String> getCmd(String cmd) {
  // TODO: OS-Switch
  def prefix = "" // "cmd /c " for windows
  List<String> result = new ArrayList<>(2)
  "$prefix$cmd".split(" ").each {
    result.add(it)
  }
  return result
}

task prepareTestee(type:Copy)  {
  from zipTree("$buildDir/distributions/${project.name}.zip")
  into "$buildDir"
}

task prepareTest(type:Copy)  {
  from zipTree("test/test-folders.zip")
  into "$buildDir/${project.name}"
}

task makeTestExecutable(type:Exec) {
  // Only for linux
  workingDir "$buildDir/${project.name}"
  commandLine "chmod", "755",  "bin${File.separator}${project.name}"
}

task encrypt(type:Exec) {
  // Encrypt
  workingDir "$buildDir/${project.name}"
  commandLine getCmd("bin${File.separator}${project.name} -config ..${File.separator}..${File.separator}test${File.separator}1-encrypt-with-metadata.xml -nogui -nohistory -quiet")
}

task decrypt(type:Exec) {
  // Decrypt taking every folder metadata into account
  workingDir "$buildDir/${project.name}"
  commandLine  getCmd("bin${File.separator}${project.name} -config ..${File.separator}..${File.separator}test${File.separator}2-decrypt-with-metadata.xml -nogui -nohistory -quiet")
}

task decryptIgnoring(type:Exec) {
  // Decrypt ignoring any folder's metadata
  commandLine getCmd("bin${File.separator}${project.name} -config ..${File.separator}..${File.separator}test${File.separator}3-decrypt-without-metadata.xml -nogui -nohistory -quiet")
  workingDir "$buildDir/${project.name}"
}

task encryptionTest(type:Exec) {
  // Compare by hand
  commandLine getCmd("bin${File.separator}${project.name} -config ..${File.separator}..${File.separator}test${File.separator}4-compare-resulting-folders.xml -nohistory")
  workingDir "$buildDir/${project.name}"
}

encryptionTest.dependsOn decryptIgnoring
decryptIgnoring.dependsOn decrypt
decrypt.dependsOn encrypt
encrypt.dependsOn makeTestExecutable
makeTestExecutable.dependsOn prepareTest
prepareTest.dependsOn prepareTestee
prepareTestee.dependsOn check

// Project specific default output directory for eclipse users
// apply plugin: 'eclipse'
// eclipse.classpath.conventionMapping.defaultOutputDir = { new File(project.projectDir, 'build/classes/main') }
